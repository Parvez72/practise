const azure = require('azure-storage');
const config = require('../config');
const streamifier = require('streamifier');
const mime = require('mime-types');
const NODE_ENVIRONMENT = process.env['NODE_ENV'];
let blobService;
if (NODE_ENVIRONMENT === 'docker') {
    blobService = azure.createBlobService("yellowmessenger", config.AZURE_KEY);
} else {
    blobService = {};
}

const createSasUrl = (buffer, fileName, expiryTime = 43200) => {
    return new Promise((resolve, reject) => {
        let stream = streamifier.createReadStream(buffer);
        let ext = fileName.lastIndexOf(".") !== -1 ? fileName.substring(fileName.lastIndexOf(".") + 1) : "";
        let name = randomString(12, "aA#") + (new Date().getTime()) + "." + ext;
        let mimeType = mime.lookup(name) ? mime.lookup(name) : 'text/plain';
        blobService.createBlockBlobFromStream('confidential', name, stream, buffer.length, {
            contentSettings: {contentType: mimeType, cacheControl: "private, max-age=31536000"},
            corsSettings: {allowOrigins: "*"}
        }, function (error) {
            if (error) {
                return reject(error);
            } else {
                let startDate = new Date();
                let expiryDate = new Date(startDate);
                expiryDate.setMinutes(startDate.getMinutes() + parseInt(expiryTime));
                let sharedAccessPolicy = {
                    AccessPolicy: {
                        Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,
                        Start: startDate,
                        Expiry: expiryDate
                    }
                };
                let token = blobService.generateSharedAccessSignature("confidential", name, sharedAccessPolicy);
                let sasUrl = blobService.getUrl("confidential", name, token);
                return resolve(sasUrl);
            }
        });
    })
};

let randomString = function (length, chars) {
    let mask = '';
    if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';
    if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if (chars.indexOf('#') > -1) mask += '0123456789';
    if (chars.indexOf('!') > -1) mask += '~`!@#$%^&*()_+-={}[]:";\'<>?,./|\\';
    let result = '';
    for (let i = length; i > 0; --i) result += mask[Math.floor(Math.random() * mask.length)];
    return result;
};


module.exports = {
    createSasUrl
};
