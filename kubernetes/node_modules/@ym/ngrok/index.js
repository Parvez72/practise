const { getProcess, killProcess } = require("./process");

let internalApi;
let tunnels = {};

async function connect(opts) {
  opts = defaults(opts);
  validate(opts);
  if (opts.authtoken) {
    await setAuthtoken(opts);
  }
  let url;
  try {
    url = await getProcess(opts);
  } catch (error) {
    throw error;
  }

  return url;
}

function defaults(opts) {
  opts = opts || { proto: "http", port: 80 };
  if (typeof opts !== "object") opts = { proto: "http", port: opts };
  return opts;
}

function validate(opts) {
  if (!opts.subdomain) {
    throw new Error("please specify a subdomain");
  }
  if (!opts.port) {
    throw new Error("please specify a port");
  }
  if (opts.web_addr === false || opts.web_addr === "false") {
    throw new Error(
      "web_addr:false is not supported, module depends on internal ngrok api"
    );
  }
}

async function disconnect(publicUrl) {
  await killProcess();
  internalApi = null;
  tunnels = {};
}

async function kill() {
  if (!internalApi) return;
  await killProcess();
  internalApi = null;
  tunnels = {};
}

module.exports = {
  connect,
  disconnect,
  kill
};
