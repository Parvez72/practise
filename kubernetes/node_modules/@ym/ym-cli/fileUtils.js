const fs = require("fs");

// slowly move all fs used to fse. fse >>> fs in terms of API and maintainability and cross os working
// currently our ym-cli is only geared towards Unix systems
const fse = require('fs-extra');
const path = require("path");
const chalk = require("chalk");
const {commitAndPush} = require("./helper");
const CURRENT_PATH = process.cwd();

const ymrcDoesExist = () => {
    try {
        return fs.existsSync(path.join(CURRENT_PATH, ".ymrc"));
    } catch (err) {
        return false;
    }
};

const getConfig = () => {
    try {
        return JSON.parse(fs.readFileSync(path.join(CURRENT_PATH, ".ymrc")));
    } catch (e) {
        return {};
    }
};

const updateConfig = (config) => {
    return new Promise((resolve) => {
        fs.writeFileSync(
            path.join(CURRENT_PATH, ".ymrc"),
            JSON.stringify(config, null, 4)
        );
        return resolve();
    });
};

const writeConfig = config => {
    return new Promise((resolve, reject) => {
        try {
            if (!fs.existsSync(path.join(CURRENT_PATH, config.directoryName + '/functions'))) {
                fs.mkdirSync(path.join(CURRENT_PATH, config.directoryName + '/functions'));
                fs.writeFileSync(
                    path.join(CURRENT_PATH, config.directoryName + '/functions', "index.ts"),
                    `import {main} from './main'

export {
    main,
};
`);
                fs.writeFileSync(
                    path.join(CURRENT_PATH, config.directoryName + '/functions', "main.ts"),
                    `import {App} from '@ym/bot-engine';

const main = (app: App) => {
    app.start();
};

export {
    main,
};
`
                );
                fs.writeFileSync(
                    path.join(CURRENT_PATH, config.directoryName, "package.json"),
                    `{
  "name": "@ym/bots",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1",
    "build": "tsc && node ./dist/app.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@ym/bot-engine": "~0.0.45"
  }
}
`);
                fs.writeFileSync(
                    path.join(CURRENT_PATH, config.directoryName, "app.ts"),
                    `const path = require('path');
const CURRENT_PATH = process.cwd();
const {serve} = require('@ym/bot-engine');
if (process.env.NODE_ENV==='docker'){
    serve(require(path.join(CURRENT_PATH, '/dist/functions/index')), {bot: process.env.botId});

} else{
    serve(require(path.join(CURRENT_PATH, './functions/index')), {bot: process.env.botId, uid: process.env.uid});
}
`);
                fs.writeFileSync(
                    path.join(CURRENT_PATH, config.directoryName, "tsconfig.json"),
                    `{
  "compilerOptions": {
    /* Basic Options */
    "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */

    /* Strict Type-Checking Options */
    "strict": false,                           /* Enable all strict type-checking options. */
    "esModuleInterop": true ,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "outDir": "dist"

  },
  "include": [
    "**/*"
  ]
}
`);
                fs.writeFileSync(
                    path.join(CURRENT_PATH, config.directoryName, ".gitignore"),
                    `# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
# dependencies
/node_modules

# production
/dist
/vscode

# misc
.DS_Store
npm-debug.log*
yarn-error.log

/coverage
.idea
.ymrc
yarn.lock
*bak
jsconfig.json
.vscode`);
                commitAndPush('master');
            }
            fs.writeFileSync(
                path.join(CURRENT_PATH, config.directoryName, ".ymrc"),
                JSON.stringify(config, null, 4)
            );
            resolve();
        } catch (e) {
            reject(e);
        }
    });
};


const botDirExists = directoryName => {
    return fs.existsSync(path.join(CURRENT_PATH, directoryName));
};
module.exports = {
    ymrcDoesExist,
    getConfig,
    writeConfig,
    botDirExists,
    updateConfig
};
