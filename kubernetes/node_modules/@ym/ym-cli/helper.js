const inquirer = require("inquirer");
const _ = require("lodash");
const simpleGit = require("simple-git");
const request = require('request');
const CURRENT_PATH = process.cwd();

const askAPIKey = () => {
    const questions = [
        {
            type: "input",
            name: "apiKey",
            message:
                "Please enter your API Key. You can login at https://app.yellowmessenger.com and find the key at Account Section"
        }
    ];
    return inquirer.prompt(questions);
};

const askDirectory = () => {
    const questions = [
        {
            type: "input",
            name: "directoryName",
            message:
                "Please provide the project directory name"
        }
    ];
    return inquirer.prompt(questions);
};

const askBot = bots => {
    const choices = _.map(bots, bot => {
        return {
            name: bot.botName,
            value: bot.userName
        };
    });
    if (choices.length < 0) {
        return Promise.reject();
    }
    const questions = [
        {
            type: "list",
            name: "botId",
            message: "Select the Bot",
            choices,
            default: ["No Bots to Select From"]
        }
    ];
    return inquirer.prompt(questions);
};


/**
 * this function clones the bot repository from the server
 * in the directory named {botId}
 *
 * @param {Object} config - user repo config
 */
function initiateRepo(config) {
    const gitUserName = encodeURIComponent(config.gitUserName);
    const gitPassword = encodeURIComponent(config.gitPassword);
    const gitCloneUrl = `https://${gitUserName}:${gitPassword}@${config.gitRepoUrl}`;
    const git = simpleGit();
    return git.clone(gitCloneUrl, `${CURRENT_PATH}/${config.directoryName}`)
}

/**
 * this function checksout with this branch
 *
 * @param {string} branch
 */
function checkOutBranch(branch) {
    return new Promise((resolve, reject) => {
        simpleGit().checkout(branch, (err, data) => {
            if (err) {
                return reject("branch doesnt exist");
            }
            return resolve();
        });
    });
}


/**
 * This function commits and pushes the existing repo
 * in the current directory to YM git repository
 */
function commitAndPush(branch = 'master') {
    return simpleGit().add('./*').commit(`commit created at ${new Date().toString()}`).push('origin', branch);
}

/**
 * This function deploys to YM infrastructure
 * @param {Object} config
 */
function deployToYm(data) {
    const {gitRepoUrl, gitUserName, gitPassword, apiKey, botId, branch} = data;
    return new Promise((resolve, reject) => {
        const options = {
            method: 'POST',
            url: 'https://app.yellowmessenger.com/integrations/deploy/create',
            qs: {bot: botId},
            headers: {'Content-Type': 'application/json', 'x-auth-token': apiKey},
            body: {
                cloneUrl: `https://${gitUserName}:${gitPassword}@${gitRepoUrl}`,
                branch: branch
            },
            json: true
        };

        request(options, function (error, response, body) {
            if (error) return reject(error);

            resolve(body);
        });
    });
}

module.exports = {
    askAPIKey,
    askBot,
    initiateRepo,
    commitAndPush,
    deployToYm,
    checkOutBranch,
    askDirectory
};
